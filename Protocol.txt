Jonathan Demelo 250519903Protocol DescriptionsProject DescriptionServer- Begins by listening on Port 5000 for a UDP packet.- Waits for “1” token from Client, which signifies proper connection. - Sends display message to Client to describe server expectations.- Next, the Server holds until the proper function input is received.- Based off the inputted token by the Client, the Server then informs the Client of what port and connection type the function requested requires, so that the next connection can be made.- The Server builds the requested connection type, and then listens for the Server-Client connection to be made.- Once the Client activates the new connection, based off the function, the Server will  communicate to the Client the requirements and expectations of the function, and then alternates between a client-side display output token (just the outputted lines), and the Client response token (“connectionkey”).- Within the echo function, if the client types ‘exit’, the server will take this as a token to both send a token to the Client to signal a close of connection, alongside an exit (“exitProgram” token) of the program process.- If at any time the user inputs an incorrect value to the Server, the Server will catch the fault and display a rational behind the error, and the token “exitProgram” to successfully quit both sides of the connection.- At the end of all three function sections, the “exitProgram” token will be sent to signal a proper connection close on both sides of the communication.Client- Begins by grabbing the desired Server IP address from user input. This then allows the client to send a token UDP packet to (“1” token) the server address, creating the Client-Server connection.- The Server then responds by sending a request for a function choice, to which the user will choose either 1, 2, or 3. This is sent back to the Server.- If this user input is improper, the program will inform the user of their error and end the program.- The Server, based off the function selection, will now send a port token to the Client , thus directing the Client to the required port connection, as well as the connection type token (“TCP”/”UDP”).- With this new information, the Client will enter the appropriate section of code and create a new connection request to the Server.For the rest of the program, the Client enters in a looping structure that moves based off of Server tokens and responses. It first takes in the input from the server, and based off the input, either uses it as a token in the case of an exit request (“exitProgram” token), file transfer request (“funcNumber 2” token), information request (“infoKey” token), Client response request (“connectionkey”), or else, simply outputting the Server’s input to the display console. This repeats until an exit request is called. Tokens Used“exitProgram” - A token used to signal a connection end and a program quit.“connectionkey” - A token used as a request Client user input.“1” - An initial token used in the request for the first UDP connection.“funcNumber” - A token saved to determine the Client’s desired Server function.“infoKey” - A token called when the Server requests access to the Client’s connection   		information“TCP”/”UDP”/”Port” - A token used to determine the Server’s requested connection type.